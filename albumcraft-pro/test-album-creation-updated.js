const fs = require('fs');
const path = require('path');

// Fun√ß√£o para criar dados de teste simulando m√∫ltiplos √°lbuns
function createTestData() {
  // Simular 5 √°lbuns pequenos para teste r√°pido
  const albums = [];
  
  // Templates v√°lidos conforme o schema
  const validTemplates = ['classic', 'modern', 'artistic', 'minimal'];
  
  for (let i = 1; i <= 5; i++) {
    const album = {
      albumName: `√Ålbum Teste ${i}`,
      template: validTemplates[i % validTemplates.length], // Usar templates v√°lidos
      files: []
    };
    
    // Adicionar 2-3 fotos por √°lbum para teste r√°pido
    const photoCount = Math.floor(Math.random() * 2) + 2; // 2-3 fotos
    
    for (let j = 1; j <= photoCount; j++) {
      // Criar um buffer de imagem simples (1x1 pixel PNG)
      const pngBuffer = Buffer.from([
        0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, // PNG signature
        0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, // IHDR chunk
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // 1x1 pixel
        0x08, 0x02, 0x00, 0x00, 0x00, 0x90, 0x77, 0x53, 0xDE,
        0x00, 0x00, 0x00, 0x0C, 0x49, 0x44, 0x41, 0x54, // IDAT chunk
        0x08, 0x99, 0x01, 0x01, 0x00, 0x00, 0x00, 0xFF, 0xFF,
        0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x73, 0x75, 0x01, 0x18,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82 // IEND
      ]);
      
      album.files.push({
        name: `foto_${i}_${j}.png`,
        size: pngBuffer.length,
        type: 'image/png',
        buffer: pngBuffer.toString('base64')
      });
    }
    
    albums.push(album);
  }
  
  return {
    eventName: 'Evento Teste Atualizado',
    albums: albums,
    sessionId: `test-session-${Date.now()}`
  };
}

// Fun√ß√£o para testar a cria√ß√£o de √°lbuns
async function testAlbumCreation() {
  console.log('üß™ === TESTE DA IMPLEMENTA√á√ÉO ATUALIZADA ===');
  console.log('üìÖ Data:', new Date().toLocaleString());
  
  try {
    const testData = createTestData();
    
    console.log(`üìä Dados de teste criados:`);
    console.log(`   - Evento: ${testData.eventName}`);
    console.log(`   - Template: ${testData.template}`);
    console.log(`   - √Ålbuns: ${testData.albums.length}`);
    console.log(`   - Total de fotos: ${testData.albums.reduce((total, album) => total + album.files.length, 0)}`);
    
    console.log('\nüöÄ Enviando requisi√ß√£o para cria√ß√£o em lote...');
    
    const response = await fetch('http://localhost:3001/api/projects/batch', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testData)
    });
    
    console.log(`üì° Status da resposta: ${response.status}`);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Erro na requisi√ß√£o:', errorText);
      return;
    }
    
    const result = await response.json();
    console.log('‚úÖ Resposta recebida:', JSON.stringify(result, null, 2));
    
    if (result.success) {
      console.log(`\nüéâ Teste iniciado com sucesso!`);
      console.log(`üìã Session ID: ${result.sessionId}`);
      console.log(`‚è≥ Aguarde o processamento dos √°lbuns...`);
      console.log(`\nüí° Dica: Monitore os logs do servidor para acompanhar o progresso.`);
      
      // Aguardar um pouco e verificar estat√≠sticas
      setTimeout(async () => {
        try {
          const statsResponse = await fetch('http://localhost:3001/api/queue/stats');
          if (statsResponse.ok) {
            const stats = await statsResponse.json();
            console.log('\nüìä Estat√≠sticas da fila:', JSON.stringify(stats, null, 2));
          }
        } catch (error) {
          console.log('‚ÑπÔ∏è N√£o foi poss√≠vel obter estat√≠sticas da fila');
        }
      }, 2000);
      
    } else {
      console.error('‚ùå Falha no teste:', result.error);
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
  }
}

// Executar o teste
testAlbumCreation();