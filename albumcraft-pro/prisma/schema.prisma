// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserPlan {
  FREE
  PRO
  ENTERPRISE
}

enum ProjectStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
}

enum AlbumSize {
  SIZE_30X30
  SIZE_20X30
  CUSTOM
}

model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  passwordHash          String    @map("password_hash")
  name                  String
  avatarUrl             String?   @map("avatar_url")
  plan                  UserPlan  @default(FREE)
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  lastLogin             DateTime? @map("last_login")
  resetPasswordToken    String?   @map("reset_password_token")
  resetPasswordExpires  DateTime? @map("reset_password_expires")

  // Relacionamentos
  projects Project[]
  photos   Photo[]
  layouts  Layout[]

  @@map("users")
}

model Project {
  id          String        @id @default(cuid())
  userId      String        @map("user_id")
  name        String
  description String?
  albumSize   AlbumSize     @map("album_size")
  status      ProjectStatus @default(DRAFT)
  settings    Json?
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  // Relacionamentos
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  pages Page[]

  @@map("projects")
}

model Page {
  id                  String  @id @default(cuid())
  projectId           String  @map("project_id")
  pageNumber          Int     @map("page_number")
  layoutId            String? @map("layout_id")
  backgroundColor     String? @map("background_color")
  backgroundImageUrl  String? @map("background_image_url")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  project         Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  layout          Layout?          @relation(fields: [layoutId], references: [id])
  photoPlacement  PhotoPlacement[]

  @@unique([projectId, pageNumber])
  @@map("pages")
}

model Photo {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  originalUrl  String   @map("original_url")
  thumbnailUrl String   @map("thumbnail_url")
  mediumUrl    String   @map("medium_url")
  filename     String
  fileSize     Int      @map("file_size")
  width        Int
  height       Int
  mimeType     String   @map("mime_type")
  uploadedAt   DateTime @default(now()) @map("uploaded_at")
  metadata     Json?

  // Relacionamentos
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  photoPlacement PhotoPlacement[]

  @@map("photos")
}

model PhotoPlacement {
  id       String @id @default(cuid())
  pageId   String @map("page_id")
  photoId  String @map("photo_id")
  x        Float
  y        Float
  width    Float
  height   Float
  rotation Float  @default(0)
  zIndex   Int    @map("z_index") @default(0)
  filters  Json?

  // Relacionamentos
  page  Page  @relation(fields: [pageId], references: [id], onDelete: Cascade)
  photo Photo @relation(fields: [photoId], references: [id], onDelete: Cascade)

  @@map("photo_placements")
}

model Layout {
  id           String   @id @default(cuid())
  name         String
  category     String
  isPublic     Boolean  @map("is_public") @default(true)
  createdBy    String?  @map("created_by")
  templateData Json     @map("template_data")
  previewUrl   String   @map("preview_url")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relacionamentos
  creator User?  @relation(fields: [createdBy], references: [id])
  pages   Page[]

  @@map("layouts")
}
