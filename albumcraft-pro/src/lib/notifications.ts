// Interface para dados de notifica√ß√£o
export interface NotificationData {
  type?: string
  message: string
  timestamp?: string
  [key: string]: unknown
}

// Interface para estat√≠sticas da fila
export interface QueueStats {
  waiting: number
  active: number
  completed: number
  failed: number
}

// Cache para conex√µes ativas
const activeConnections = new Map<string, WritableStreamDefaultWriter>()

// Fun√ß√£o para enviar notifica√ß√£o simples
export const sendAlbumProgressSimple = async (
  sessionId: string,
  albumName: string,
  progress: number,
  message: string
) => {
  try {
    console.log(`üì¢ Enviando progresso: ${albumName} - ${progress}% - ${message}`)
    
    // Buscar conex√£o ativa
    const writer = activeConnections.get(sessionId)
    if (writer) {
      const data = {
        type: 'album_progress',
        albumName,
        progress,
        message,
        timestamp: new Date().toISOString()
      }
      
      await writer.write(`data: ${JSON.stringify(data)}\n\n`)
    } else {
      console.log(`‚ö†Ô∏è Nenhuma conex√£o ativa encontrada para sess√£o: ${sessionId}`)
    }
  } catch (error) {
    console.error('‚ùå Erro ao enviar notifica√ß√£o:', error)
  }
}

// Fun√ß√£o para adicionar conex√£o ativa
export const addActiveConnection = (sessionId: string, writer: WritableStreamDefaultWriter) => {
  activeConnections.set(sessionId, writer)
  console.log(`‚úÖ Conex√£o adicionada para sess√£o: ${sessionId}`)
}

// Fun√ß√£o para remover conex√£o ativa
export const removeActiveConnection = (sessionId: string) => {
  activeConnections.delete(sessionId)
  console.log(`üóëÔ∏è Conex√£o removida para sess√£o: ${sessionId}`)
}

// Fun√ß√£o para obter estat√≠sticas da fila (simulada)
export const getQueueStats = (): QueueStats => {
  return {
    waiting: 0,
    active: 0,
    completed: 0,
    failed: 0
  }
}

// Fun√ß√£o para enviar notifica√ß√£o geral
export const sendNotification = async (sessionId: string, data: NotificationData) => {
  try {
    const writer = activeConnections.get(sessionId)
    if (writer) {
      const notification = {
        ...data,
        timestamp: data.timestamp || new Date().toISOString()
      }
      
      await writer.write(`data: ${JSON.stringify(notification)}\n\n`)
      console.log(`üì¢ Notifica√ß√£o enviada para sess√£o ${sessionId}:`, notification)
    } else {
      console.log(`‚ö†Ô∏è Nenhuma conex√£o ativa para sess√£o: ${sessionId}`)
    }
  } catch (error) {
    console.error('‚ùå Erro ao enviar notifica√ß√£o:', error)
  }
}

// Fun√ß√£o para broadcast para todas as conex√µes
export const broadcastNotification = async (data: NotificationData) => {
  const notification = {
    ...data,
    timestamp: data.timestamp || new Date().toISOString()
  }
  
  for (const [sessionId, writer] of activeConnections) {
    try {
      await writer.write(`data: ${JSON.stringify(notification)}\n\n`)
    } catch (error) {
      console.error(`‚ùå Erro ao enviar broadcast para sess√£o ${sessionId}:`, error)
      // Remover conex√£o inv√°lida
      activeConnections.delete(sessionId)
    }
  }
  
  console.log(`üì¢ Broadcast enviado para ${activeConnections.size} conex√µes`)
}

// Limpeza peri√≥dica de conex√µes inativas
setInterval(() => {
  console.log(`üßπ Limpeza: ${activeConnections.size} conex√µes ativas`)
}, 60000) // A cada minuto