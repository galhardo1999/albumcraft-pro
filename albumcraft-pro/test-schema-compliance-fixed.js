const fs = require('fs');
const path = require('path');

// Fun√ß√£o para fazer login e obter token
async function login() {
  console.log('üîê Fazendo login para obter token...');
  
  try {
    const response = await fetch('http://localhost:3000/api/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: 'test@example.com', // Email de teste
        password: 'password123'    // Senha de teste
      })
    });
    
    if (!response.ok) {
      console.log('‚ùå Login falhou, tentando criar usu√°rio de teste...');
      return await createTestUser();
    }
    
    const result = await response.json();
    
    if (result.success && result.data.token) {
      console.log('‚úÖ Login realizado com sucesso');
      return result.data.token;
    } else {
      console.log('‚ùå Login falhou:', result.error?.message);
      return await createTestUser();
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante login:', error.message);
    return await createTestUser();
  }
}

// Fun√ß√£o para criar usu√°rio de teste
async function createTestUser() {
  console.log('üë§ Criando usu√°rio de teste...');
  
  try {
    const response = await fetch('http://localhost:3000/api/auth/register', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        name: 'Usu√°rio Teste Schema',
        email: 'test@example.com',
        password: 'password123'
      })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.log('‚ùå Falha ao criar usu√°rio:', errorText);
      return null;
    }
    
    const result = await response.json();
    
    if (result.success && result.data.token) {
      console.log('‚úÖ Usu√°rio de teste criado com sucesso');
      return result.data.token;
    } else {
      console.log('‚ùå Falha ao criar usu√°rio:', result.error?.message);
      return null;
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao criar usu√°rio:', error.message);
    return null;
  }
}

// Fun√ß√£o para criar dados de teste com schema correto
function createTestData() {
  // Simular 3 √°lbuns pequenos para teste r√°pido
  const albums = [];
  
  // Templates v√°lidos conforme o schema
  const validTemplates = ['classic', 'modern', 'artistic', 'minimal'];
  
  for (let i = 1; i <= 3; i++) {
    const album = {
      albumName: `√Ålbum Schema Test ${i}`,
      template: validTemplates[i % validTemplates.length], // Usar templates v√°lidos
      files: []
    };
    
    // Adicionar 2 fotos por √°lbum para teste r√°pido
    for (let j = 1; j <= 2; j++) {
      // Criar um buffer de imagem simples (1x1 pixel PNG)
      const pngBuffer = Buffer.from([
        0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, // PNG signature
        0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, // IHDR chunk
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // 1x1 pixel
        0x08, 0x02, 0x00, 0x00, 0x00, 0x90, 0x77, 0x53, 0xDE,
        0x00, 0x00, 0x00, 0x0C, 0x49, 0x44, 0x41, 0x54, // IDAT chunk
        0x08, 0x99, 0x01, 0x01, 0x00, 0x00, 0x00, 0xFF, 0xFF,
        0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x73, 0x75, 0x01, 0x18,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82 // IEND
      ]);
      
      album.files.push({
        name: `foto_schema_${i}_${j}.png`,
        size: pngBuffer.length,
        type: 'image/png',
        buffer: pngBuffer.toString('base64')
      });
    }
    
    albums.push(album);
  }
  
  return {
    eventName: 'Evento Teste Schema Corrigido',
    albums: albums,
    sessionId: `schema-test-session-${Date.now()}`
  };
}

// Fun√ß√£o para testar a cria√ß√£o de √°lbuns
async function testSchemaCompliance() {
  console.log('üß™ === TESTE DE CONFORMIDADE COM SCHEMA CORRIGIDO ===');
  console.log('üìÖ Data:', new Date().toLocaleString());
  
  try {
    // 1. Fazer login para obter token
    const token = await login();
    
    if (!token) {
      console.error('‚ùå N√£o foi poss√≠vel obter token de autentica√ß√£o');
      return;
    }
    
    // 2. Criar dados de teste conforme schema
    const testData = createTestData();
    
    console.log(`\nüìä Dados de teste criados (conforme schema):`);
    console.log(`   - Evento: ${testData.eventName}`);
    console.log(`   - Session ID: ${testData.sessionId}`);
    console.log(`   - √Ålbuns: ${testData.albums.length}`);
    testData.albums.forEach((album, index) => {
      console.log(`     ${index + 1}. ${album.albumName} (template: ${album.template})`);
    });
    console.log(`   - Total de fotos: ${testData.albums.reduce((total, album) => total + album.files.length, 0)}`);
    
    // 3. Validar dados antes de enviar
    console.log('\nüîç Validando dados conforme schema...');
    
    // Verificar se templates s√£o v√°lidos
    const validTemplates = ['classic', 'modern', 'artistic', 'minimal'];
    const invalidTemplates = testData.albums.filter(album => !validTemplates.includes(album.template));
    
    if (invalidTemplates.length > 0) {
      console.error('‚ùå Templates inv√°lidos encontrados:', invalidTemplates.map(a => a.template));
      return;
    }
    
    console.log('‚úÖ Todos os templates s√£o v√°lidos');
    
    // Verificar se todos os campos obrigat√≥rios est√£o presentes
    const missingFields = [];
    if (!testData.eventName) missingFields.push('eventName');
    if (!testData.sessionId) missingFields.push('sessionId');
    if (!testData.albums || testData.albums.length === 0) missingFields.push('albums');
    
    testData.albums.forEach((album, index) => {
      if (!album.albumName) missingFields.push(`albums[${index}].albumName`);
      if (!album.template) missingFields.push(`albums[${index}].template`);
      if (!album.files || album.files.length === 0) missingFields.push(`albums[${index}].files`);
      
      album.files.forEach((file, fileIndex) => {
        if (!file.name) missingFields.push(`albums[${index}].files[${fileIndex}].name`);
        if (!file.type) missingFields.push(`albums[${index}].files[${fileIndex}].type`);
        if (!file.buffer) missingFields.push(`albums[${index}].files[${fileIndex}].buffer`);
        if (typeof file.size !== 'number') missingFields.push(`albums[${index}].files[${fileIndex}].size`);
      });
    });
    
    if (missingFields.length > 0) {
      console.error('‚ùå Campos obrigat√≥rios ausentes:', missingFields);
      return;
    }
    
    console.log('‚úÖ Todos os campos obrigat√≥rios est√£o presentes');
    
    // 4. Enviar requisi√ß√£o para cria√ß√£o em lote
    console.log('\nüöÄ Enviando requisi√ß√£o para cria√ß√£o em lote...');
    
    const response = await fetch('http://localhost:3000/api/projects/batch', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(testData)
    });
    
    console.log(`üì° Status da resposta: ${response.status}`);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Erro na requisi√ß√£o:', errorText);
      return;
    }
    
    const result = await response.json();
    console.log('‚úÖ Resposta recebida:', JSON.stringify(result, null, 2));
    
    if (result.success) {
      console.log(`\nüéâ Teste de schema iniciado com sucesso!`);
      console.log(`üìã Session ID: ${result.sessionId}`);
      console.log(`‚è≥ Aguarde o processamento dos √°lbuns...`);
      
      // 5. Monitorar progresso
      console.log('\nüîÑ Monitorando progresso por 20 segundos...');
      let attempts = 0;
      const maxAttempts = 10; // 20 segundos
      
      const checkProgress = setInterval(async () => {
        attempts++;
        try {
          const notificationsResponse = await fetch(`http://localhost:3000/api/notifications?sessionId=${result.sessionId}`, {
            headers: {
              'Authorization': `Bearer ${token}`
            }
          });
          
          if (notificationsResponse.ok) {
            const notifications = await notificationsResponse.json();
            if (notifications.length > 0) {
              const lastNotification = notifications[notifications.length - 1];
              console.log(`üì¢ [${new Date().toLocaleTimeString()}] ${lastNotification.message}`);
            }
          }
        } catch (error) {
          console.log('‚ÑπÔ∏è Erro ao verificar notifica√ß√µes');
        }
        
        if (attempts >= maxAttempts) {
          clearInterval(checkProgress);
          console.log('\n‚úÖ Monitoramento finalizado.');
          console.log('üí° Verifique o dashboard para ver os √°lbuns criados conforme o schema Prisma.');
          
          // Verificar estat√≠sticas finais
          try {
            const statsResponse = await fetch('http://localhost:3000/api/queue/stats', {
              headers: {
                'Authorization': `Bearer ${token}`
              }
            });
            if (statsResponse.ok) {
              const stats = await statsResponse.json();
              console.log('\nüìä Estat√≠sticas finais da fila:', JSON.stringify(stats, null, 2));
            }
          } catch (error) {
            console.log('‚ÑπÔ∏è N√£o foi poss√≠vel obter estat√≠sticas finais');
          }
        }
      }, 2000);
      
    } else {
      console.error('‚ùå Falha no teste:', result.error);
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
  }
}

// Executar o teste
testSchemaCompliance();