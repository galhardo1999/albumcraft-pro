generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  firstName     String?
  lastName      String?
  plan          String     @default("FREE")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  password      String?
  accounts      Account[]
  albums        Album[]
  albumJobs     AlbumJob[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Album {
  id          String   @id @default(cuid())
  userId      String
  name        String
  size        String   @default("A4")
  orientation String   @default("Landscape")
  status      String   @default("draft")
  photoCount  Int      @default(0)
  slideCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos      Photo[]
  slides      Slide[]

  @@index([userId])
}

model Photo {
  id           String   @id @default(cuid())
  albumId      String
  filename     String
  originalName String
  fileSize     Int
  mimeType     String
  width        Int
  height       Int
  url          String
  thumbnailUrl String?
  order        Int      @default(0)
  createdAt    DateTime @default(now())
  album        Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)

  @@index([albumId])
}

model Slide {
  id             String   @id @default(cuid())
  albumId        String
  order          Int      @default(0)
  layout         String   @default("single")
  photoPositions Json     @default("[]")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  album          Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)

  @@index([albumId])
}

model AlbumJob {
  id             String   @id @default(cuid())
  userId         String
  type           String
  status         String   @default("pending")
  progress       Int      @default(0)
  totalItems     Int      @default(0)
  completedItems Int      @default(0)
  metadata       Json     @default("{}")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
