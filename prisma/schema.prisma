// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  firstName     String?
  lastName      String?
  password      String?   // For credentials authentication
  plan          String    @default("FREE") // FREE, PRO, PREMIUM
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts Account[]
  sessions Session[]
  albums   Album[]
  albumJobs AlbumJob[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application models
model Album {
  id          String   @id @default(cuid())
  userId      String
  name        String
  size        String   @default("A4") // A4, A3, Letter, Square
  orientation String   @default("Landscape") // Landscape, Portrait, Square
  status      String   @default("draft") // draft, completed, exported
  photoCount  Int      @default(0)
  slideCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos Photo[]
  slides Slide[]

  @@index([userId])
}

model Photo {
  id           String   @id @default(cuid())
  albumId      String
  filename     String
  originalName String
  fileSize     Int
  mimeType     String
  width        Int
  height       Int
  url          String
  thumbnailUrl String?
  order        Int      @default(0)
  createdAt    DateTime @default(now())

  // Relations
  album Album @relation(fields: [albumId], references: [id], onDelete: Cascade)

  @@index([albumId])
}

model Slide {
  id             String   @id @default(cuid())
  albumId        String
  order          Int      @default(0)
  layout         String   @default("single") // single, double, triple, quad, grid
  photoPositions Json     @default("[]") // Array of photo IDs with positions
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  album Album @relation(fields: [albumId], references: [id], onDelete: Cascade)

  @@index([albumId])
}

model AlbumJob {
  id             String   @id @default(cuid())
  userId         String
  type           String // create_multiple, export_batch
  status         String   @default("pending") // pending, processing, completed, failed
  progress       Int      @default(0)
  totalItems     Int      @default(0)
  completedItems Int      @default(0)
  metadata       Json     @default("{}")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
